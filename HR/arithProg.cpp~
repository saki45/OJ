#include<iostream>
#include<cstdlib>
#include<cstdio>

#define MAX 1000003
#define STEP 100000
#define SIZE 100
using namespace std;

/*
long long getMod(int base, long long exp){
	long long mod = 1;
	for(int i=exp; i>0; i--){
		mod = (mod*base) % MAX;
	}
	return mod;
}*/

long long getMod(int base, long long exp){
	if(exp == 1)
		return base % MAX;
	if(exp % 2 == 0){
		long long tmp = getMod(base, exp/2);
		return (tmp * tmp) % MAX;
	}
	else{
		long long tmp = getMod(base, exp/2);
		tmp = (tmp * tmp) % MAX;
		return (base * tmp) % MAX;
	}
}
/*
long long factorialMod(long long n, long long m){
	long long mod = n;
	while(--n >= m){
		mod = (mod*n) % MAX;
	}
	return mod;
}*/

void factModTable(long long *fMap){
	fMap[0] = 1;
	fMap[1] = 1;
	for(int i=2; i<MAX; i++){
		fMap[i] = (fMap[i-1]*i) % MAX;
	}
}

int main(){
	int n, q;
	scanf("%d", &n);

	int *a = new int[n+1];
	int *d = new int[n+1];
	int *p = new int[n+1];
	//long long *m = new long long[n+1];

	long long *fMap = new long long[MAX];
	factModTable(fMap);

	for(int i=0; i<n; i++){
		scanf("%d %d %d",&a[i+1], &d[i+1], &p[i+1]);
		//cin>>a[i+1]>>d[i+1]>>p[i+1];
		//m[i+1] = getMod(d[i+1], p[i+1]);
	}

	//long long *modHelper = new long long[SIZE];
	/*
	modHelper[0] = 1;
	for(long long i=1; i<SIZE; i++){
		modHelper[i] = (modHelper[i-1] * factorialMod(i*STEP,(i-1)*STEP+1)) % MAX;
		cout<<i<<' '<<modHelper[i]<<endl;
	}
	*/
	//cin>>q;
	scanf("%d", &q);
	while(q--){
		int ins, i, j, v;
		//cin>>ins;
		scanf("%d", &ins);
		if(ins == 1){
			//cin>>i>>j>>v;
			scanf(" %d %d %d", &i, &j, &v);
			for(int st=i;st<=j;st++){
				p[st] += v;
				//cout<<'u'<<m[st]<<' '<<getMod(d[st], v)<<endl;
				//m[st] = (m[st]*getMod(d[st], v)) % MAX;
			}

		}
		else{
			//cin>>i>>j;
			scanf(" %d %d", &i, &j);
			long long sumP = 0;
			long long sumMod = 1;
			for(int st=i; st<=j; st++){
				sumP += p[st];
				//sumMod = (sumMod * m[st]) % MAX;
			}

			/*
			int helperIdx = sumP/STEP;
			if(helperIdx >= SIZE){
				helperIdx = SIZE-1;
			}
			if(helperIdx >= 0)
				sumMod = (sumMod * factorialMod(sumP, 1)) % MAX;
			else if(sumP == helperIdx*STEP)
				sumMod = (sumMod * modHelper[helperIdx]) % MAX;
			else{
				sumMod = (sumMod * modHelper[helperIdx]) % MAX;
				sumMod = (sumMod * factorialMod(sumP-helperIdx*STEP, 1+helperIdx*STEP)) % MAX;
			}*/
			if(sumP < MAX){
				for(int st=i; st<=j; st++){
					sumMod = (sumMod * getMod(d[st], p[st])) % MAX;
				}
				//sumMod = (sumMod * factorialMod(sumP, 1)) % MAX;
				sumMod = (sumMod * fMap[sumP]) % MAX;
			}
			else
				sumMod = 0;
			printf("%Ld %Ld\n", sumP, sumMod);
			//cout<<sumP<<' '<<sumMod<<endl;
		}
	}

	delete[] a;
	delete[] d;
	delete[] p;
	//delete[] m;	
	//delete[] modHelper;
	delete[] fMap;
}

